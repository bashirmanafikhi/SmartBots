@page "/ExchangesPage"
@rendermode InteractiveServer
@using SmartBots.Application.Features.Exchange
@using SmartBots.Components.Layout
@inject IMediator Mediator
@attribute [Authorize]

<CustomErrorBoundary>
    <PageTitle>Exchange List</PageTitle>

    <div class="container mt-4">
        <h4 class="text-center mb-4">@((!IsUpdateMode) ? "New Exchange" : "Edit Exchange")</h4>
        <EditForm Model="@ExchangeModel" OnValidSubmit="@SubmitExchange">
            <div class="row">
                <div class="form-group col-md-6 mb-3">
                    <label>Name:</label>
                    <InputText @bind-Value="ExchangeModel.Name" class="form-control" />
                </div>

                <div class="form-group col-md-6 mb-3">
                    <label>Type:</label>
                    <InputSelect @bind-Value="ExchangeModel.Type" class="form-control">
                        <option value="Binance">Binance</option>
                        <option value="Coinbase">Coinbase</option>
                    </InputSelect>
                </div>

                <div class="form-group col-md-6 mb-3">
                    <label>API Key:</label>
                    <InputText @bind-Value="ExchangeModel.ApiKey" class="form-control" />
                </div>

                <div class="form-group col-md-6 mb-3">
                    <label>API Secret:</label>
                    <InputText @bind-Value="ExchangeModel.ApiSecret" class="form-control" />
                </div>

                <div class="form-group col-md-6 mt-3 mb-3">
                    <label>Is Test:</label>
                    <InputCheckbox @bind-Value="ExchangeModel.IsTest" class="form-check-input" />
                </div>
            </div>

            <div class="text-center mt-3">
                <button type="submit" class="btn btn-primary mx-2">@((IsUpdateMode) ? "Update" : "Add")</button>
                <button type="button" class="btn btn-secondary mx-2" @onclick="ClearForm">Clear</button>
            </div>
        </EditForm>
    </div>

    <div class="container mt-4">
        <h4 class="text-center mb-4">Exchanges List</h4>
        <div class="list-group">
            @foreach (var exchange in Exchanges)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <span class="exchange-name">@exchange.Name (@exchange.Type)</span>
                    <div>
                        <button class="btn btn-danger" @onclick="@(() => DeleteExchange(exchange))">Delete</button>
                        <button class="btn btn-primary mx-2" @onclick="@(() => EditExchange(exchange))">Edit</button>
                        <NavLink class="btn btn-warning" href="@($"exchange/{exchange.Id}")">
                            Get Account Info
                        </NavLink>
                    </div>
                </div>
            }
        </div>
    </div>

</CustomErrorBoundary>

@code {
    private IList<ExchangeDto> Exchanges { get; set; } = new List<ExchangeDto>();
    private ExchangeDto ExchangeModel = new ExchangeDto();

    private bool IsUpdateMode => ExchangeModel.Id != Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadExchanges();
    }

    private async Task LoadExchanges()
    {
        Exchanges = await Mediator.Send(new GetAllExchangesQuery());
    }

    private async Task SubmitExchange()
    {
        if (IsUpdateMode)
        {
            await Mediator.Send(new UpdateExchangeAccountCommand()
            {
                Id = ExchangeModel.Id,
                Model = ExchangeModel
            });
        }
        else
        {
            await Mediator.Send(new AddExchangeCommand()
            {
                Name = ExchangeModel.Name,
                Type = ExchangeModel.Type,
                ApiKey = ExchangeModel.ApiKey,
                ApiSecret = ExchangeModel.ApiSecret,
                IsTest = ExchangeModel.IsTest
            });
        }

        await LoadExchanges();
        ClearForm();
    }

    private void EditExchange(ExchangeDto exchange)
    {
        ExchangeModel = new ExchangeDto
            {
                Id = exchange.Id,
                Name = exchange.Name,
                Type = exchange.Type,
                ApiKey = exchange.ApiKey,
                ApiSecret = exchange.ApiSecret,
                IsTest = exchange.IsTest
            };
    }

    private async Task DeleteExchange(ExchangeDto exchange)
    {
        await Mediator.Send(new DeleteExchangeCommand { Id = exchange.Id });
        await LoadExchanges();
    }

    private void ClearForm()
    {
        ExchangeModel = new ExchangeDto();
    }
}
