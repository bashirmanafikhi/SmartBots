@page "/tradingbot/{TradingBotIdString?}"

@using MediatR
@using SmartBots.Application.Features.TradingBots
@using SmartBots.Application.Features.TradingRules
@using SmartBots.Application.Features.Exchange
@using SmartBots.Components.Pages.Shared
@using SmartBots.Components.Pages.TradingBots.SubForms
@using SmartBots.Domain.Entities
@using SmartBots.Domain.Entities.IndicatorRules
@using SmartBots.Domain.Enums
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer
@inject IMediator Mediator
@inject NavigationManager NavigationManager
@attribute [Authorize]

<CustomErrorBoundary>
    <div class="container mt-4">
        @if (ExchangeAccounts == null || !ExchangeAccounts.Any())
        {
            <p>Loading exchange accounts...</p>
        }
        else
        {
            <EditForm Model="@NewItem" OnSubmit="@HandleValidSubmit" class="mt-4">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">Trading Bot Configuration</h5>
                    </div>
                    <div class="card-body">

                        <!-- Trading Bot Information -->
                        <Accordion Title="Trading Bot Information">
                            <TradingBotMainInformationForm TradingBot="NewItem" ExchangeAccounts="ExchangeAccounts" />
                        </Accordion>

                        <!-- Extra Orders Settings -->
                        <Accordion Title="Extra Orders Settings">
                            <ExtraOrdersSettingsForm ExtraOrdersSettings="NewItem.ExtraOrders" />
                        </Accordion>

                        <!-- Stop Loss Settings -->
                        <Accordion Title="Stop Loss Settings">
                            <StopLossSettingsForm StopLossSettings="NewItem.StopLoss" />
                        </Accordion>

                        <!-- Take Profit Settings -->
                        <Accordion Title="Take Profit Settings">
                            <TakeProfitSettingsForm TakeProfitSettings="NewItem.TakeProfit" />
                        </Accordion>

                        <!-- Trading Rules -->
                        <Accordion Title="Take Profit Settings">
                            <TradingRulesForm TradingRules="NewItem.TradingRules" />
                        </Accordion>
                    
                    </div>
                </div>

                <!-- Submit and Cancel Buttons -->
                <div class="card-footer bg-transparent">
                    <div class="d-flex justify-content-end gap-2">
                        <button type="submit" class="btn btn-success">
                            @SubmitButtonLabel
                        </button>
                        <button type="reset" class="btn btn-secondary">
                            Clear
                        </button>
                        <button type="button" class="btn btn-warning" @onclick="GoToTradingBotsPage">
                            Cancel
                        </button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</CustomErrorBoundary>

@code {
    [Parameter]
    public string? TradingBotIdString { get; set; }

    public Guid? TradingBotId { get; set; }

    private TradingBotDto NewItem { get; set; } = new TradingBotDto();
    private List<ExchangeAccountDto> ExchangeAccounts { get; set; } = new List<ExchangeAccountDto>();

    private bool IsUpdateMode => TradingBotId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        await LoadExchangeAccounts();
    }

    private async Task LoadExchangeAccounts()
    {
        ExchangeAccounts = await Mediator.Send(new GetAllExchangeAccountsQuery());
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(TradingBotIdString) && Guid.TryParse(TradingBotIdString, out Guid parsedId))
            TradingBotId = parsedId;

        if (IsUpdateMode)
            NewItem = await Mediator.Send(new GetTradingBotQuery(TradingBotId!.Value));
    }

    private string SubmitButtonLabel => IsUpdateMode ? "Update" : "Add";

    private async Task HandleValidSubmit()
    {
        if (IsUpdateMode)
        {
            await Mediator.Send(new UpdateTradingBotCommand
                {
                    Id = TradingBotId!.Value,
                    Model = NewItem
                });
        }
        else
        {
            await Mediator.Send(new AddTradingBotCommand
                {
                    Model = NewItem
                });
        }

        GoToTradingBotsPage();
    }

    private void GoToTradingBotsPage()
    {
        NavigationManager.NavigateTo("/TradingBots");
    }
}
