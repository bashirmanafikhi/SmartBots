@page "/TodosPage"
@rendermode InteractiveServer
@using MediatR
@using SmartBots.Application.Features.Todos
@inject IMediator Mediator
@attribute [Authorize]

<PageTitle>Todo List</PageTitle>

<div class="border" style="padding: 20px;">
    <h4>New Item</h4>
    <TodoItemForm OnItemAdded="@(async () => await ItemsChanged())" />
</div>

<div class="border" style="padding: 20px; margin-top: 20px;">
    <div style="display: flex; flex-direction: column">
        @foreach (var todo in Todos)
        {
            <div style="display: flex; margin-bottom: 10px;">
                <div style="display: flex; align-items: center;margin-bottom: 10px;">
                    <div class="@ItemClass(todo)" style="width: 280px;">@todo.Text</div>
                </div>
                @if (todo.Completed)
                {
                    <div style="width: 120px">
                        <button class="btn btn-primary" onclick="@(() => UncompleteItem(todo))">Uncomplete</button>
                    </div>
                }
                @if (!todo.Completed)
                {
                    <div style="width: 120px">
                        <button class="btn btn-primary" onclick="@(() => CompleteItem(todo))">Complete</button>
                    </div>
                }
                <div>
                    <button class="btn btn-danger" onclick="@(() => DeleteItem(todo))">Delete</button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private IList<TodoDto> Todos { get; set; } = new List<TodoDto>();

    protected override async Task OnInitializedAsync()
    {
        Todos = await Mediator.Send(new GetAllTodosQuery());
    }

    public string ItemClass(TodoDto item)
    {
        return item.Completed ? "item-completed" : "";
    }

    public async Task DeleteItem(TodoDto item)
    {
        await Mediator.Send(new DeleteTodoCommand() { Id = item.Id });
        await ItemsChanged();
    }

    public async Task CompleteItem(TodoDto item)
    {
        await Mediator.Send(new CompleteTodoCommand() { Id = item.Id });
        await ItemsChanged();
    }

    public async Task UncompleteItem(TodoDto item)
    {
        await Mediator.Send(new UncompleteTodoCommand() { Id = item.Id });
        await ItemsChanged();
    }

    public async Task ItemsChanged()
    {
        Todos = await Mediator.Send(new GetAllTodosQuery());
        StateHasChanged();
    }
}