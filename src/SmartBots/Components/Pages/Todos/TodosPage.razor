@page "/TodosPage"
@rendermode InteractiveServer
@using MediatR
@using SmartBots.Application.Features.Todos
@using SmartBots.Components.Pages.Shared
@inject IMediator Mediator
@attribute [Authorize]

<CustomErrorBoundary>
    <PageTitle>Todo List</PageTitle>

    <!-- New Item Form -->
    <div class="border p-3">
        <h4>@(IsUpdateMode ? "New Item" : "Update Item")</h4>
        <TodoItemForm TodoId="@SelectedTodoId"
                      OnItemSaved="@(async () => await ItemsChanged())"
                      OnCancelUpdate="CancelUpdate" />
    </div>

    <!-- Search and Todo List Section -->
    <div class="border p-3 mt-3">

        <!-- Search Section -->
        <div class="form-row">
            <div class="col-md-4">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search todos..." @bind="SearchKeyword" @bind:event="oninput" />
                    <button class="btn btn-primary" @onclick="PerformSearch">Search</button>
                </div>
            </div>
        </div>

        <hr />

        <!-- Todo List -->
        <div class="todo-list">
            @if (Todos.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Text</th>
                            <th>Priority</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var todo in Todos)
                        {
                            <tr>
                                <td class="@ItemClass(todo)">@todo.Text</td>
                                <td class="@ItemClass(todo)">@todo.Priority</td>
                                <td>
                                    @if (todo.Completed)
                                    {
                                        <span class="badge bg-success">Completed</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark">Pending</span>
                                    }
                                </td>
                                <td>
                                    @if (todo.Completed)
                                    {
                                        <button class="btn btn-primary btn-sm me-2" @onclick="() => UncompleteItem(todo)">Uncomplete</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-primary btn-sm me-2" @onclick="() => CompleteItem(todo)">Complete</button>
                                    }

                                    <button class="btn btn-info btn-sm me-2" @onclick="() => EditItem(todo)">Update</button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteItem(todo)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No todos found.</p>
            }
        </div>
    </div>

    <!-- Pagination Component -->
    <Pagination TotalItems="_totalItems"
                PageSize="_pageSize"
                CurrentPage="_currentPage"
                PageSizeOptions="new int[] { 5, 10, 20, 50 }"
                OnPageChanged="HandlePageChanged"
                OnPageSizeChanged="HandlePageSizeChanged" />


</CustomErrorBoundary>
@code {
    private IList<TodoDto> Todos { get; set; } = new List<TodoDto>();
    private string SearchKeyword { get; set; } = string.Empty;

    private int _currentPage = 1;
    private int _pageSize = 10;
    private int _totalItems;

    private Guid? SelectedTodoId { get; set; }

    private bool IsUpdateMode => !SelectedTodoId.HasValue || SelectedTodoId == Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodosAsync();
    }

    private async Task LoadTodosAsync()
    {
        var query = new SearchTodosQuery
            {
                Criteria = new TodosSearchCriteria
                {
                    Keyword = SearchKeyword
                },
                Paging = new Application.Common.Paging
                {
                    PageNumber = _currentPage,
                    PageSize = _pageSize
                }
            };

        var result = await Mediator.Send(query);

        Todos = result.Items;
        _totalItems = result.Total;
    }

    private async Task PerformSearch()
    {
        _currentPage = 1; // Reset to first page when searching
        await LoadTodosAsync();
    }

    private async Task HandlePageChanged(int pageNumber)
    {
        _currentPage = pageNumber;
        await LoadTodosAsync();
    }

    private async Task HandlePageSizeChanged(int pageSize)
    {
        _pageSize = pageSize;
        _currentPage = 1; // Reset to first page when page size changes
        await LoadTodosAsync();
    }

    private string ItemClass(TodoDto item)
    {
        return item.Completed ? "text-decoration-line-through text-muted" : "";
    }

    private async Task DeleteItem(TodoDto item)
    {
        await Mediator.Send(new DeleteTodoCommand { Id = item.Id });
        await ItemsChanged();
    }

    private async Task CompleteItem(TodoDto item)
    {
        await Mediator.Send(new CompleteTodoCommand { Id = item.Id });
        await ItemsChanged();
    }

    private async Task UncompleteItem(TodoDto item)
    {
        await Mediator.Send(new UncompleteTodoCommand { Id = item.Id });
        await ItemsChanged();
    }

    private async Task EditItem(TodoDto item)
    {
        SelectedTodoId = item.Id;

        await InvokeAsync(StateHasChanged);
    }

    private async Task ItemsChanged()
    {
        await LoadTodosAsync();
        StateHasChanged();
    }

    private async Task CancelUpdate(string? _)
    {
        SelectedTodoId = null;
        await InvokeAsync(StateHasChanged);
    }
}
