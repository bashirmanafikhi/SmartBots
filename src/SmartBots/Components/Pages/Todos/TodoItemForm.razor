@using MediatR
@using SmartBots.Application.Features.Todos
@using SmartBots.Domain.Entities
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authorization
@using SmartBots.Domain.Enums
@inject IMediator Mediator
@attribute [Authorize]

<EditForm Model="@NewItem" OnValidSubmit="@HandleValidSubmit" class="mt-4">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-row align-items-center">

        <div class="form-group col-md-4">
            <label for="itemText">Text:</label>
            <InputText @bind-Value="NewItem.Text" class="form-control" id="itemText" required />
        </div>

        <div class="form-group col-md-4 mb-2">
            <label for="priority">Priority:</label>
            <InputSelect @bind-Value="NewItem.Priority" class="form-control" id="priority" required>
                @foreach (var priority in Enum.GetValues(typeof(TodoPriority)))
                {
                    <option value="@priority">@priority</option>
                }
            </InputSelect>
        </div>

        <div class="form-group col-md-4">
            <div class="d-flex align-items-center h-100">
                <button type="submit" class="btn btn-primary mr-2">@SubmitButtonLabel</button>
                @if (IsUpdateMode)
                {
                    <button type="button" class="btn btn-secondary" @onclick="CancelUpdate">Cancel</button>
                }
                <button type="reset" class="btn btn-secondary ms-2">Clear</button>
            </div>
        </div>

    </div>
</EditForm>

@code {
    [Parameter]
    public Guid? TodoId { get; set; } // Optional parameter for Todo ID

    [Parameter]
    public required Action OnItemSaved { get; set; }

    [Parameter]
    public EventCallback<string?> OnCancelUpdate { get; set; }

    private TodoDto NewItem { get; set; } = new TodoDto("");

    private bool IsUpdateMode => TodoId.HasValue;

    protected override async Task OnParametersSetAsync()
    {
        if (IsUpdateMode)
        {
            var fetchedItem = await Mediator.Send(new GetTodoQuery(TodoId!.Value));
            if (fetchedItem != null)
            {
                NewItem = fetchedItem;
            }
            else
            {
                // Optionally handle the case where the Todo is not found
                // For example, display a notification or log an error
                // Here, we'll reset the form
                NewItem = new TodoDto("");
            }
        }
        else
        {
            // Reset the form when not in update mode
            NewItem = new TodoDto("");
        }
    }

    private string SubmitButtonLabel => IsUpdateMode ? "Update" : "Add";

    private async Task HandleValidSubmit()
    {
        if (IsUpdateMode)
        {
            // Update mode
            await Mediator.Send(new UpdateTodoCommand
            {
                Id = TodoId!.Value,
                Model = new TodoDto
                {
                    Text = NewItem.Text,
                    Priority = NewItem.Priority
                }
            });
        }
        else
        {
            // Add mode
            await Mediator.Send(new AddTodoCommand
            {
                Text = NewItem.Text,
                Priority = NewItem.Priority
            });
        }

        // Reset the form if in add mode
        if (!IsUpdateMode)
        {
            NewItem = new TodoDto("");
        }

        // Notify the parent component
        OnItemSaved?.Invoke();

        // If in update mode, clear the TodoId to switch back to add mode
        if (IsUpdateMode)
        {
            await OnCancelUpdate.InvokeAsync(null);
        }
    }

    private async Task CancelUpdate()
    {
        await OnCancelUpdate.InvokeAsync(null);
    }
}
