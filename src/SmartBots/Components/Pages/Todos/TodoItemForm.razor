@using MediatR
@using SmartBots.Application.Features.Todos
@using SmartBots.Domain.Entities
@inject IMediator Mediator
@attribute [Authorize]


<EditForm Model="@NewItem" OnSubmit="@ItemAdded" class="mt-4">
    <div class="form-row align-items-center">

        <div class="form-group col-md-4">
            <label for="priority">Priority:</label>
            <InputSelect @bind-Value="NewItem.Priority" class="form-control" id="priority">
                @foreach (var priority in Enum.GetValues(typeof(TodoPriority)))
                {
                    <option value="@priority">@priority</option>
                }
            </InputSelect>
        </div>

        <div class="form-group col-md-4">
            <label for="itemText">Text:</label>
            <InputText @bind-Value="NewItem.Text" class="form-control" id="itemText" />
        </div>

        <div class="form-group col-md-4">
            <div class="d-flex align-items-center h-100">
                <input type="submit" class="btn btn-primary mr-2" value="Add" />
                <input type="reset" class="btn btn-secondary" value="Clear" />
            </div>
        </div>

    </div>
</EditForm>


@code {
    [Parameter]
    public required Action OnItemAdded { get; set; }

    private TodoDto NewItem = new TodoDto("");

    public async Task ItemAdded()
    {

        await Mediator.Send(new AddTodoCommand() { Text = NewItem.Text });
        NewItem.Text = "";

        if (OnItemAdded != null)
        {
            OnItemAdded();
        }
    }
}