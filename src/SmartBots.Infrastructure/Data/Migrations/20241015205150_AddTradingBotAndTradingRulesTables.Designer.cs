// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartBots.Infrastructure.Data;

#nullable disable

namespace SmartBots.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241015205150_AddTradingBotAndTradingRulesTables")]
    partial class AddTradingBotAndTradingRulesTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.Exchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTest")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.Todo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Todos");
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.TradingBot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BaseAsset")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BotType")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QuoteAsset")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("TradeSize")
                        .HasColumnType("float");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ExchangeId");

                    b.ToTable("TradingBot");
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.TradingRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUsedForClosing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsedForOpening")
                        .HasColumnType("bit");

                    b.Property<string>("RuleType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<Guid>("TradingBotId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TradingBotId");

                    b.ToTable("TradingRule");

                    b.HasDiscriminator<string>("RuleType").HasValue("TradingRule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SmartBots.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.BollingerBandsRule", b =>
                {
                    b.HasBaseType("SmartBots.Domain.Entities.TradingRule");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<double>("StandardDeviation")
                        .HasColumnType("float");

                    b.ToTable("TradingRule", t =>
                        {
                            t.Property("Period")
                                .HasColumnName("BollingerBandsRule_Period");
                        });

                    b.HasDiscriminator().HasValue("BollingerBands");
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.MACDRule", b =>
                {
                    b.HasBaseType("SmartBots.Domain.Entities.TradingRule");

                    b.Property<int>("FastPeriod")
                        .HasColumnType("int");

                    b.Property<int>("SignalLinePeriod")
                        .HasColumnType("int");

                    b.Property<int>("SlowPeriod")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MACD");
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.RSIRule", b =>
                {
                    b.HasBaseType("SmartBots.Domain.Entities.TradingRule");

                    b.Property<double>("OverboughtThreshold")
                        .HasColumnType("float");

                    b.Property<double>("OversoldThreshold")
                        .HasColumnType("float");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("RSI");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartBots.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartBots.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartBots.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartBots.Infrastructure.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.Exchange", b =>
                {
                    b.HasOne("SmartBots.Infrastructure.Data.ApplicationUser", null)
                        .WithMany("Exchange")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.Todo", b =>
                {
                    b.HasOne("SmartBots.Infrastructure.Data.ApplicationUser", null)
                        .WithMany("Todos")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.TradingBot", b =>
                {
                    b.HasOne("SmartBots.Domain.Entities.Exchange", "Exchange")
                        .WithMany()
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SmartBots.Domain.Entities.ExtraOrdersSettings", "ExtraOrders", b1 =>
                        {
                            b1.Property<Guid>("TradingBotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Count")
                                .HasColumnType("int");

                            b1.Property<double>("FirstDeviationPercentage")
                                .HasColumnType("float");

                            b1.Property<double>("FirstVolumeScale")
                                .HasColumnType("float");

                            b1.Property<double>("StepDeviationScale")
                                .HasColumnType("float");

                            b1.Property<double>("StepVolumeScale")
                                .HasColumnType("float");

                            b1.HasKey("TradingBotId");

                            b1.ToTable("TradingBot");

                            b1.WithOwner()
                                .HasForeignKey("TradingBotId");
                        });

                    b.OwnsOne("SmartBots.Domain.Entities.StopLossSettings", "StopLoss", b1 =>
                        {
                            b1.Property<Guid>("TradingBotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IncludeExtraOrdersPositions")
                                .HasColumnType("bit");

                            b1.Property<double>("StopLossPercentage")
                                .HasColumnType("float");

                            b1.Property<int>("TimeoutSeconds")
                                .HasColumnType("int");

                            b1.Property<bool>("TrailingStopLoss")
                                .HasColumnType("bit");

                            b1.Property<bool>("UseStopLoss")
                                .HasColumnType("bit");

                            b1.HasKey("TradingBotId");

                            b1.ToTable("TradingBot");

                            b1.WithOwner()
                                .HasForeignKey("TradingBotId");
                        });

                    b.OwnsOne("SmartBots.Domain.Entities.TakeProfitSettings", "TakeProfit", b1 =>
                        {
                            b1.Property<Guid>("TradingBotId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("IncludeExtraOrdersPositions")
                                .HasColumnType("bit");

                            b1.Property<double>("TakeProfitPercentage")
                                .HasColumnType("float");

                            b1.Property<double>("TrailingDeviationPercentage")
                                .HasColumnType("float");

                            b1.Property<bool>("TrailingTakeProfit")
                                .HasColumnType("bit");

                            b1.Property<bool>("UseTakeProfit")
                                .HasColumnType("bit");

                            b1.HasKey("TradingBotId");

                            b1.ToTable("TradingBot");

                            b1.WithOwner()
                                .HasForeignKey("TradingBotId");
                        });

                    b.Navigation("Exchange");

                    b.Navigation("ExtraOrders")
                        .IsRequired();

                    b.Navigation("StopLoss")
                        .IsRequired();

                    b.Navigation("TakeProfit")
                        .IsRequired();
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.TradingRule", b =>
                {
                    b.HasOne("SmartBots.Domain.Entities.TradingBot", "TradingBot")
                        .WithMany("TradingRules")
                        .HasForeignKey("TradingBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TradingBot");
                });

            modelBuilder.Entity("SmartBots.Domain.Entities.TradingBot", b =>
                {
                    b.Navigation("TradingRules");
                });

            modelBuilder.Entity("SmartBots.Infrastructure.Data.ApplicationUser", b =>
                {
                    b.Navigation("Exchange");

                    b.Navigation("Todos");
                });
#pragma warning restore 612, 618
        }
    }
}
